#!/bin/bash
# Git Commit Message Hook
# {{ ansible_managed }}
# Validates commit message format and content

set -e

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=${2:-}

# Don't validate merge commits, rebase, squash, etc.
if [ -n "$COMMIT_SOURCE" ]; then
    exit 0
fi

# Color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

EXIT_CODE=0

echo -e "${BLUE}🔍 Validating commit message...${NC}"

# Read commit message (exclude comments)
COMMIT_MSG=$(sed '/^#/d' "$COMMIT_MSG_FILE" | head -n 1)

# Check if message is empty
if [ -z "$COMMIT_MSG" ]; then
    echo -e "${RED}✗ Commit message cannot be empty${NC}"
    exit 1
fi

# Get message stats
FIRST_LINE=$(sed '/^#/d' "$COMMIT_MSG_FILE" | head -n 1)
FIRST_LINE_LENGTH=${#FIRST_LINE}
SECOND_LINE=$(sed '/^#/d' "$COMMIT_MSG_FILE" | head -n 2 | tail -n 1)

# Check first line length
MAX_FIRST_LINE={{ git_commit_msg_maxline }}
if [ $FIRST_LINE_LENGTH -gt $MAX_FIRST_LINE ]; then
    echo -e "${RED}✗ First line exceeds {{ git_commit_msg_maxline }} characters${NC}"
    echo -e "   Current: $FIRST_LINE_LENGTH characters"
    echo -e "   Message: $FIRST_LINE"
    EXIT_CODE=1
fi

# Check for blank line between subject and body
if [ -n "$SECOND_LINE" ] && [ "$SECOND_LINE" != "" ]; then
    echo -e "${RED}✗ Second line must be blank${NC}"
    EXIT_CODE=1
fi

# Check for conventional commit format (optional but recommended)
{% if git_commit_msg_check_type %}
if ! echo "$FIRST_LINE" | grep -qE '^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert)'; then
    echo -e "${YELLOW}⚠️  Commit type not recognized${NC}"
    echo -e "   Expected types: feat, fix, docs, style, refactor, test, chore, perf, ci, build, revert"
    echo -e "   Message: $FIRST_LINE"
fi
{% endif %}

# Check scope format (optional)
{% if git_commit_msg_check_scope %}
if echo "$FIRST_LINE" | grep -qE '^\w+\('; then
    if ! echo "$FIRST_LINE" | grep -qE '^\w+\(.+\):'; then
        echo -e "${YELLOW}⚠️  Scope format appears incomplete${NC}"
        echo -e "   Expected format: type(scope): message"
    fi
fi
{% endif %}

# Check for imperative mood (first word should be lowercase after type)
SUBJECT=$(echo "$FIRST_LINE" | sed -E 's/^[a-z]+(\([^)]*\))?:[[:space:]]*//')
if [ -n "$SUBJECT" ]; then
    FIRST_WORD=$(echo "$SUBJECT" | awk '{print $1}')
    # Check if first word appears to be past tense or present participle
    if echo "$FIRST_WORD" | grep -qE '(ed|ing)$'; then
        echo -e "${YELLOW}⚠️  Consider using imperative mood (present tense)${NC}"
        echo -e "   Instead of: $SUBJECT"
    fi
fi

# Log the commit message validation
HOOKS_DIR=$(git config core.hooksPath)
if [ -d "${HOOKS_DIR%/hooks}" ]; then
    mkdir -p "${HOOKS_DIR%/hooks}/../logs"
    echo "[$(date +'%Y-%m-%d %H:%M:%S')] Message validation: $COMMIT_MSG" >> "${HOOKS_DIR%/hooks}/../logs/commit-msg.log" 2>/dev/null || true
fi

if [ $EXIT_CODE -eq 0 ]; then
    echo -e "${GREEN}✓ Commit message format valid${NC}"
else
    echo -e "${RED}✗ Commit message validation failed${NC}"
fi

exit $EXIT_CODE

---
# Git Configuration Role
# Manages git configuration, hooks, templates, and reload mechanisms
# Supports system-wide and user-specific configurations

- name: Initialize git variables
  ansible.builtin.set_fact:
    git_config_home: "{{ home_dir }}/.config/git"
    git_templates_dir: "{{ home_dir }}/.git-templates"
    git_hooks_dir: "{{ home_dir }}/.git-templates/hooks"
    git_global_config: "{{ home_dir }}/.gitconfig"
    git_local_config: "{{ home_dir }}/.gitconfig.local"
    git_attributes_file: "{{ home_dir }}/.gitattributes"
  tags: [always, git]

- name: Create git directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
    owner: "{{ current_user }}"
    group: staff
  loop:
    - "{{ git_config_home }}"
    - "{{ git_templates_dir }}"
    - "{{ git_hooks_dir }}"
    - "{{ home_dir }}/.devkit/git"
  tags: [git, setup]

- name: Deploy global gitconfig (user info, core settings)
  ansible.builtin.template:
    src: gitconfig.j2
    dest: "{{ git_global_config }}"
    mode: '0644'
    owner: "{{ current_user }}"
    group: staff
  notify: reload git config
  tags: [git, config]

- name: Deploy gitconfig.local (local overrides, credentials)
  ansible.builtin.template:
    src: gitconfig.local.j2
    dest: "{{ git_local_config }}"
    mode: '0644'
    owner: "{{ current_user }}"
    group: staff
  notify: reload git config
  tags: [git, config]

- name: Deploy global gitattributes
  ansible.builtin.template:
    src: gitattributes.j2
    dest: "{{ git_attributes_file }}"
    mode: '0644'
    owner: "{{ current_user }}"
    group: staff
  tags: [git, config]

- name: Deploy gitignore_global
  ansible.builtin.copy:
    src: gitignore_global
    dest: "{{ git_config_home }}/ignore"
    mode: '0644'
    owner: "{{ current_user }}"
    group: staff
  tags: [git, config]

# Git Hooks Setup
# NOTE: Custom hooks disabled when pre-commit framework is enabled
# Pre-commit handles all hooks via .pre-commit-config.yaml
# If needed to create custom hooks, set git_enable_precommit: false
- name: Create pre-commit hook
  ansible.builtin.template:
    src: hooks/pre-commit.sh.j2
    dest: "{{ git_hooks_dir }}/pre-commit"
    mode: '0755'
    owner: "{{ current_user }}"
    group: staff
  notify: reload git hooks
  when: not git_enable_precommit | default(true)
  tags: [git, hooks]

- name: Create commit-msg hook
  ansible.builtin.template:
    src: hooks/commit-msg.sh.j2
    dest: "{{ git_hooks_dir }}/commit-msg"
    mode: '0755'
    owner: "{{ current_user }}"
    group: staff
  notify: reload git hooks
  when: not git_enable_precommit | default(true)
  tags: [git, hooks]

- name: Create post-commit hook
  ansible.builtin.template:
    src: hooks/post-commit.sh.j2
    dest: "{{ git_hooks_dir }}/post-commit"
    mode: '0755'
    owner: "{{ current_user }}"
    group: staff
  when: not git_enable_precommit | default(true)
  tags: [git, hooks]

- name: Create prepare-commit-msg hook
  ansible.builtin.template:
    src: hooks/prepare-commit-msg.sh.j2
    dest: "{{ git_hooks_dir }}/prepare-commit-msg"
    mode: '0755'
    owner: "{{ current_user }}"
    group: staff
  when: not git_enable_precommit | default(true)
  tags: [git, hooks]

# Git Ignore Configuration
- name: Configure global gitignore
  community.general.git_config:
    name: core.excludesFile
    value: "{{ git_config_home }}/ignore"
    scope: global
  notify: reload git config
  tags: [git, config]

# Git Templates Configuration
- name: Configure git to use templates directory
  community.general.git_config:
    name: init.templateDir
    value: "{{ git_templates_dir }}"
    scope: global
  notify: reload git config
  tags: [git, config]

- name: Configure git to use hooks from templates
  community.general.git_config:
    name: core.hooksPath
    value: "{{ git_hooks_dir }}"
    scope: global
  notify: reload git config
  tags: [git, config]

# GitHub SSH URL Rewrite (for seamless SSH authentication)
- name: Configure git to use SSH for GitHub URLs
  community.general.git_config:
    name: url."git@github.com:".insteadOf
    value: "https://github.com/"
    scope: global
  notify: reload git config
  tags: [git, config, ssh]

# User Configuration
- name: Configure git user info from variables
  community.general.git_config:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    scope: global
  loop:
    - name: user.name
      value: "{{ git_user_name | default('') }}"
    - name: user.email
      value: "{{ git_user_email | default('') }}"
  when: item.value | length > 0
  notify: reload git config
  tags: [git, config, user]

# Conditional GPG Configuration
- name: Configure git GPG signing (optional)
  block:
    - name: Check GPG key availability
      ansible.builtin.shell: |
        gpg --list-secret-keys --with-colons | grep -q "{{ git_gpg_key_id }}"
      register: gpg_key_check
      changed_when: false
      failed_when: false
      when: git_enable_gpg_signing | default(false)
      tags: [git, gpg]

    - name: Configure git GPG signing
      community.general.git_config:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        scope: global
      loop:
        - name: user.signingKey
          value: "{{ git_gpg_key_id }}"
        - name: commit.gpgSign
          value: "{{ git_auto_sign_commits | default('false') }}"
      when: git_enable_gpg_signing | default(false) and gpg_key_check is defined and gpg_key_check.rc == 0
      notify: reload git config
      tags: [git, gpg]

  tags: [git, gpg, optional]

# SSH Key Configuration (optional)
- name: Configure SSH signing (optional)
  block:
    - name: Check SSH key availability
      ansible.builtin.stat:
        path: "{{ git_ssh_signing_key }}"
      register: ssh_key_check
      when: git_enable_ssh_signing | default(false)
      tags: [git, ssh]

    - name: Configure git SSH signing
      community.general.git_config:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        scope: global
      loop:
        - name: gpg.format
          value: "ssh"
        - name: user.signingKey
          value: "{{ git_ssh_signing_key }}"
        - name: commit.gpgSign
          value: "{{ git_auto_sign_commits | default('false') }}"
      when:
        - git_enable_ssh_signing | default(false)
        - ssh_key_check is defined
        - ssh_key_check.stat.exists
      notify: reload git config
      tags: [git, ssh]

  tags: [git, ssh, optional]

# Pre-Commit Framework Setup (Multi-language quality enforcement)
- name: Install pre-commit framework
  block:
    - name: Install pre-commit via pip
      ansible.builtin.pip:
        name: "pre-commit=={{ git_precommit_version }}"
        state: present
        extra_args: "--upgrade"
      environment:
        HOME: "{{ home_dir }}"
      register: precommit_install
      when: git_enable_precommit | default(true)
      tags: [git, precommit, install]

    - name: Verify pre-commit installation
      ansible.builtin.command: pre-commit --version
      register: precommit_version
      changed_when: false
      when: git_enable_precommit | default(true)
      tags: [git, precommit, verify]

    - name: Copy .pre-commit-config.yaml to repo root
      ansible.builtin.copy:
        src: >-
          {{ role_path }}/../../../.pre-commit-config.yaml
        dest: "{{ repo_root }}/.pre-commit-config.yaml"
        mode: '0644'
        owner: "{{ current_user }}"
        group: staff
      when:
        - git_enable_precommit | default(true)
        - repo_root is defined
      tags: [git, precommit, config]

    - name: Unset core.hooksPath if set (pre-commit requirement)
      ansible.builtin.shell: |
        if git config --global core.hooksPath > /dev/null 2>&1; then
          git config --global --unset core.hooksPath
          echo "unset"
        else
          echo "not-set"
        fi
      register: hooks_path_status
      changed_when: hooks_path_status.stdout == "unset"
      when: git_enable_precommit | default(true)
      tags: [git, precommit, config]

    - name: Initialize pre-commit hooks in repository
      ansible.builtin.shell: |
        cd {{ repo_root | default(lookup('env', 'PWD')) }}
        pre-commit install
      environment:
        HOME: "{{ home_dir }}"
      register: precommit_init
      changed_when: false
      when: git_enable_precommit | default(true)
      tags: [git, precommit, init]

    - name: Display pre-commit installation status
      ansible.builtin.debug:
        msg: |
          Pre-Commit Framework Status:
          =============================
          Installed: {{ precommit_version.stdout | default('N/A') }}
          Hooks Configured:
            {{ precommit_init.stdout_lines | default(['Not initialized']) }}
      when: git_enable_precommit | default(true)
      tags: [git, precommit, verify]

  tags: [git, precommit, optional]

# Git Aliases
- name: Configure git aliases
  community.general.git_config:
    name: "alias.{{ item.key }}"
    value: "{{ item.value }}"
    scope: global
  loop: "{{ git_aliases | dict2items }}"
  when: git_aliases is defined and git_aliases | length > 0
  notify: reload git config
  tags: [git, config, aliases]

# Git Display/Formatting Configuration
- name: Configure git display settings
  community.general.git_config:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    scope: global
  loop:
    - name: color.ui
      value: "true"
    - name: log.date
      value: "{{ git_log_date_format | default('iso') }}"
    - name: log.showSignature
      value: "{{ git_show_signature | default('false') }}"
  tags: [git, config, display]

# Merge/Rebase Configuration
- name: Configure merge and rebase settings
  community.general.git_config:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    scope: global
  loop:
    - name: pull.rebase
      value: "{{ git_pull_rebase | default('true') }}"
    - name: rebase.autoStash
      value: "{{ git_rebase_auto_stash | default('true') }}"
    - name: merge.conflictStyle
      value: "{{ git_merge_conflict_style | default('diff3') }}"
  tags: [git, config, merge]

# Performance Configuration
- name: Configure git performance settings
  community.general.git_config:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    scope: global
  loop:
    - name: core.preloadindex
      value: "true"
    - name: core.fsmonitor
      value: "{{ git_fsmonitor | default('true') }}"
    - name: feature.worktreeConfig
      value: "true"
  tags: [git, config, performance]

# Backup existing config
- name: Create backup of git config
  ansible.builtin.shell: |
    if [ -f "{{ git_global_config }}" ]; then
      cp "{{ git_global_config }}" \
        "{{ home_dir }}/.devkit/git/gitconfig.backup.$(date +%s)"
    fi
  changed_when: false
  tags: [git, backup]

# Verification
- name: Verify git is properly configured
  block:
    - name: Check git user configuration
      ansible.builtin.shell: |
        git config --get user.name && git config --get user.email
      register: git_user_check
      changed_when: false
      tags: [git, verify]

    - name: Check git hooks are accessible
      ansible.builtin.stat:
        path: "{{ git_hooks_dir }}/pre-commit"
      register: git_hooks_check
      tags: [git, verify]

    - name: Display git configuration status
      ansible.builtin.debug:
        msg: |
          Git Configuration Status:
          ==========================
          Config Directory: {{ git_config_home }}
          Templates Dir: {{ git_templates_dir }}
          Hooks Dir: {{ git_hooks_dir }}
          User Name: {{ git_user_check.stdout_lines[0] | default('NOT SET') }}
          User Email: {{ git_user_check.stdout_lines[1] | default('NOT SET') }}
          Hooks Available: {{ git_hooks_check.stat.exists }}
      tags: [git, verify]
  tags: [git, verify]

- name: Final git configuration verification
  ansible.builtin.command: git config --list --show-origin
  register: git_config_list
  changed_when: false
  tags: [git, verify]

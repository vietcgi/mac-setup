[build-system]
requires = ["setuptools>=75.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "devkit"
version = "1.0.0"
description = "Enterprise-grade system configuration management"
authors = [
    {name = "Kevin", email = "kevin@example.com"}
]
requires-python = ">=3.13"
license = {text = "MIT"}

dependencies = [
    "PyYAML>=6.0",
    "requests>=2.28",
    "setuptools>=75.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.0",
    "mypy>=1.11.1",
    "ruff>=0.6.9",
    "pre-commit>=3.3.0",
    "bandit>=1.7.5",
    "safety>=2.3.5",
    "radon>=6.0.1",
    "pylint>=3.0.0",
    "isort>=5.12.0",
    "pydocstyle>=6.3.0",
    "black>=23.0.0",
    "types-PyYAML>=6.0.12",
    "types-requests>=2.31.0",
    "types-setuptools>=75.0.0",
]

# =========================================================================
# RUFF CONFIGURATION (Linting & Formatting)
# =========================================================================
[tool.ruff]
line-length = 100
target-version = "py313"
preview = true

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # Pyflakes
    "I",    # isort
    "N",    # pep8-naming
    "D",    # pydocstyle
    "UP",   # pyupgrade
    "YTT",  # flake8-2020
    "ANN",  # flake8-annotations
    "ASYNC", # flake8-async
    "S",    # flake8-bandit (security)
    "BLE",  # flake8-blind-except
    "FBT",  # flake8-boolean-trap
    "B",    # flake8-bugbear
    "A",    # flake8-builtins
    "COM",  # flake8-commas
    "CPY",  # flake8-copyright
    "C4",   # flake8-comprehensions
    "DTZ",  # flake8-datetimez
    "T10",  # flake8-debugger
    "EXE",  # flake8-executable
    "ISC",  # flake8-implicit-str-concat
    "ICN",  # flake8-import-conventions
    "G",    # flake8-logging-format
    "PIE",  # flake8-pie
    "T20",  # flake8-print
    "PT",   # flake8-pytest-style
    "Q",    # flake8-quotes
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "SLF",  # flake8-self
    "SLOT", # flake8-slots
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
    "TCH",  # flake8-type-checking
    "INT",  # flake8-gettext
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib
    "TD",   # flake8-todos
    "FIX",  # flake8-fixme
    "ERA",  # eradicate
    "PD",   # pandas-vet
    "PL",   # Pylint
    "TRY",  # tryceratops
    "PERF", # Perflint
    "FURB", # refurb
    "LOG",  # flake8-logging
    "RUF",  # Ruff-specific rules
]

ignore = [
    "E501",   # Line too long (handled by formatter)
    "D104",   # Missing docstring in public package
    "D100",   # Missing docstring in public module
    "ANN101", # Missing type annotation for 'self'
    "ANN102", # Missing type annotation for 'cls'
    "ANN401", # Dynamically typed expressions (typing.Any) are allowed
    "N802",   # Function name lowercase (AST visitor methods use PascalCase by design)
    "S101",   # Use of assert (ok for tests)
    "S404",   # subprocess module import (necessary for system commands)
    "S603",   # Subprocess without shell parameter (we use shell=False explicitly)
    "S607",   # Partial executable path (resolved by PATH)
    "FBT001", # Boolean-typed positional argument (design choice)
    "PLR0911", # Too many return statements (validation logic necessity)
    "PLR0913", # Too many arguments
    "PLR2004", # Magic values
    "UP007",  # Use `X | Y` instead of `Union` (older Python compatibility)
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pylint]
max-args = 7
max-branches = 15
max-locals = 15
max-statements = 50

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "lf"

# =========================================================================
# ISORT CONFIGURATION (Import Sorting)
# =========================================================================
[tool.isort]
profile = "black"
line_length = 100
skip_gitignore = true
known_first_party = ["cli", "config"]
known_third_party = ["yaml", "requests"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
length_sort_straight = false
force_single_line = false

# =========================================================================
# PYTEST CONFIGURATION (Testing & Coverage)
# =========================================================================
[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--tb=short",
    "--cov=cli",
    "--cov-fail-under=60",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "unit: Unit tests (fast, isolated)",
    "integration: Integration tests (slower, may require setup)",
    "slow: Slow tests (mark for optional skipping)",
    "security: Security-related tests",
    "performance: Performance tests",
]

# =========================================================================
# COVERAGE CONFIGURATION (Code Coverage)
# =========================================================================
[tool.coverage.run]
source = ["cli"]
branch = true
parallel = true
omit = [
    "*/tests/*",
    "*/site-packages/*",
    "*/distutils/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "^\\\\s*\\\\.\\\\.\\\\.\\\\s*$",
    "^\\\\s*pass\\\\s*$",
    "if (typing\\\\.)?cast:",
    "@abstractmethod",
    "@abc\\\\.abstractmethod",
]
precision = 2
fail_under = 60
skip_covered = false

# =========================================================================
# BANDIT CONFIGURATION (Security Scanning)
# =========================================================================
[tool.bandit]
exclude_dirs = ["tests", "docs"]
skips = []
# Define what tests to run
tests = [
    "B201",  # flask_debug_true
    "B301",  # pickle
    "B302",  # marshal
    "B303",  # md5
    "B304",  # cipher
    "B305",  # cipher
    "B306",  # temp_mktemp
    "B307",  # eval
    "B308",  # mark_safe
    "B309",  # httpsconnection
    "B310",  # urllib_urlopen
    "B311",  # random
    "B312",  # telnetlib
    "B313",  # xml_bad_etree
    "B314",  # xml_bad_expat
    "B315",  # xml_bad_sax
    "B316",  # xml_bad_pulldom
    "B317",  # xml_bad_etree
    "B318",  # xml_bad_etree
    "B319",  # xml_bad_etree
    "B320",  # xml_bad_etree
    "B321",  # ftplib
    "B322",  # unverified_context
    "B323",  # unverified_context
    "B324",  # hashlib
    "B325",  # tempnam
]

# =========================================================================
# PYLINT CONFIGURATION (Comprehensive Linting)
# =========================================================================
[tool.pylint.messages_control]
disable = [
    "line-too-long",  # Handled by ruff/black
    "missing-docstring",  # Handled by pydocstyle
    "too-many-branches",  # Acceptable in some cases
    "too-many-arguments",  # Acceptable in some cases
]

[tool.pylint.format]
max-line-length = 100

[tool.pylint.design]
max-args = 7
max-attributes = 10
max-branches = 15
max-locals = 15
max-statements = 50

[tool.pylint.similarities]
min-similarity-lines = 5
ignore-comments = true
ignore-docstrings = true
ignore-imports = true

# =========================================================================
# PYDOCSTYLE CONFIGURATION (Docstring Validation)
# =========================================================================
[tool.pydocstyle]
convention = "google"
match = "(?!test_).*\\.py"
match-dir = "(?!tests).*"

# =========================================================================
# RADON CONFIGURATION (Code Complexity)
# =========================================================================
[tool.radon]
exclude = ["tests/*", "*/migrations/*"]
ignore_patterns = ["^\\s*(#|$)"]

# =========================================================================
# BLACK CONFIGURATION (Code Formatting)
# =========================================================================
[tool.black]
line-length = 100
target-version = ['py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # Directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | migrations
)/
'''
preview = true

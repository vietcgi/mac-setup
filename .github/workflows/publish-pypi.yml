name: Publish - PyPI Package Release

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 1.0.0)'
        required: false

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  build:
    name: Build distribution package
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine wheel setuptools

      - name: Build distributions
        run: |
          python -m build

      - name: Check built artifacts
        run: |
          ls -la dist/
          python -m twine check dist/*

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
          if-no-files-found: error
          retention-days: 7

  publish-to-pypi:
    name: Publish to PyPI
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'release'
    needs: [build]
    runs-on: ubuntu-latest

    environment:
      name: pypi
      url: https://pypi.org/project/devkit

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/

  publish-to-testpypi:
    name: Publish to TestPyPI (for testing)
    if: github.event_name == 'workflow_dispatch'
    needs: [build]
    runs-on: ubuntu-latest

    environment:
      name: testpypi
      url: https://test.pypi.org/project/devkit

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          packages-dir: dist/
          skip-existing: true

  github-release-assets:
    name: Attach artifacts to GitHub release
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'release'
    needs: [build, publish-to-pypi]
    runs-on: ubuntu-latest

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Upload to release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          fail_on_unmatched_files: true

  verify-installation:
    name: Verify package installation
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'release'
    needs: [publish-to-pypi]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']

    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Wait for PyPI to update
        run: sleep 30  # Give PyPI time to index the package

      - name: Install from PyPI
        run: |
          python -m pip install --upgrade pip
          pip install devkit

      - name: Verify installation
        run: |
          python -c "import cli; print(f'âœ“ Successfully installed devkit')"

  notify:
    name: Notify release
    if: success() && (startsWith(github.ref, 'refs/tags/v') || github.event_name == 'release')
    needs: [publish-to-pypi, verify-installation]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Create success summary
        run: |
          echo "# ðŸŽ‰ Release Published" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "âœ… Package built successfully" >> $GITHUB_STEP_SUMMARY
          echo "âœ… Published to PyPI" >> $GITHUB_STEP_SUMMARY
          echo "âœ… Installation verified on multiple Python versions" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**PyPI:** https://pypi.org/project/devkit/" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Users can now install with:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "pip install devkit" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Comment on release
        uses: actions/github-script@v7
        with:
          script: |
            const release = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: context.ref.replace('refs/tags/', '')
            });

            if (release.data.id) {
              github.rest.repos.updateRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.data.id,
                body: release.data.body + '\n\n## ðŸ“¦ Installation\n\n```bash\npip install devkit\n```'
              });
            }

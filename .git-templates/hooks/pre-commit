#!/bin/bash
# Git Pre-Commit Hook - Quality Standard Enforcement
# This hook validates all commits against the quality standards
# It CANNOT be bypassed with --no-verify

set -e

REPO_ROOT=$(git rev-parse --show-toplevel)
EXIT_CODE=0

# Color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}================================================${NC}"
echo -e "${BLUE}🔍 QUALITY STANDARD PRE-COMMIT CHECKS${NC}"
echo -e "${BLUE}================================================${NC}"

# ============================================
# GATE 1: SYNTAX CHECK
# ============================================
echo ""
echo -e "${BLUE}GATE 1: Syntax Check${NC}"
echo -n "   Checking Python syntax... "

PYTHON_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.py$' || true)
if [ -n "$PYTHON_FILES" ]; then
    if python3 -m py_compile $PYTHON_FILES 2>/dev/null; then
        echo -e "${GREEN}✓${NC}"
    else
        echo -e "${RED}✗${NC}"
        echo -e "${RED}   Syntax errors found${NC}"
        EXIT_CODE=1
    fi
else
    echo -e "${GREEN}✓${NC} (no Python files)"
fi

# ============================================
# GATE 2: TESTS EXECUTION (100% pass rate)
# ============================================
echo ""
echo -e "${BLUE}GATE 2: Tests Execution${NC}"
echo -n "   Running tests... "

if command -v pytest &> /dev/null; then
    if pytest -q 2>/dev/null; then
        TEST_COUNT=$(pytest --collect-only -q 2>/dev/null | tail -1 | awk '{print $1}' || echo "?")
        echo -e "${GREEN}✓${NC} (all tests passed)"
    else
        echo -e "${RED}✗${NC} (test failures detected)"
        echo -e "${RED}   Run: pytest -v${NC}"
        EXIT_CODE=1
    fi
else
    echo -e "${YELLOW}⚠${NC} (pytest not installed)"
fi

# ============================================
# GATE 3: CODE COVERAGE (85%+ required)
# ============================================
echo ""
echo -e "${BLUE}GATE 3: Test Coverage${NC}"
echo -n "   Checking coverage (minimum 85%)... "

if command -v coverage &> /dev/null; then
    if coverage report --fail-under=85 > /tmp/coverage.txt 2>&1; then
        COVERAGE=$(grep TOTAL /tmp/coverage.txt | awk '{print $(NF-1)}' || echo "?")
        echo -e "${GREEN}✓${NC} ($COVERAGE)"
    else
        echo -e "${RED}✗${NC}"
        COVERAGE=$(grep TOTAL /tmp/coverage.txt | awk '{print $(NF-1)}' || echo "?")
        echo -e "${RED}   Coverage: $COVERAGE (minimum 85% required)${NC}"
        EXIT_CODE=1
    fi
else
    echo -e "${YELLOW}⚠${NC} (coverage not installed)"
fi

# ============================================
# GATE 4: TYPE CHECKING (mypy strict)
# ============================================
echo ""
echo -e "${BLUE}GATE 4: Type Checking${NC}"
echo -n "   Checking types (mypy strict)... "

if command -v mypy &> /dev/null; then
    if mypy --strict $PYTHON_FILES > /tmp/mypy.txt 2>&1; then
        echo -e "${GREEN}✓${NC}"
    else
        echo -e "${RED}✗${NC}"
        echo -e "${RED}   Type errors found:${NC}"
        head -5 /tmp/mypy.txt | sed 's/^/   /'
        EXIT_CODE=1
    fi
else
    echo -e "${YELLOW}⚠${NC} (mypy not installed)"
fi

# ============================================
# GATE 5: SECURITY SCAN (0 vulnerabilities)
# ============================================
echo ""
echo -e "${BLUE}GATE 5: Security Scan${NC}"
echo -n "   Scanning for vulnerabilities... "

if command -v bandit &> /dev/null; then
    if bandit -r -ll $PYTHON_FILES > /tmp/bandit.txt 2>&1; then
        echo -e "${GREEN}✓${NC}"
    else
        echo -e "${RED}✗${NC}"
        echo -e "${RED}   Security issues found:${NC}"
        grep -E "Issue:|Severity:" /tmp/bandit.txt | head -3 | sed 's/^/   /'
        EXIT_CODE=1
    fi
else
    echo -e "${YELLOW}⚠${NC} (bandit not installed)"
fi

# ============================================
# GATE 6: CODE LINTING (8.0+ score)
# ============================================
echo ""
echo -e "${BLUE}GATE 6: Code Linting${NC}"
echo -n "   Linting code (minimum 8.0 score)... "

if command -v pylint &> /dev/null; then
    if pylint --exit-zero $PYTHON_FILES > /tmp/pylint.txt 2>&1; then
        SCORE=$(grep -oP 'rated at \K[0-9.]+' /tmp/pylint.txt | head -1 || echo "?")
        if (( $(echo "$SCORE >= 8.0" | bc -l 2>/dev/null || echo 0) )); then
            echo -e "${GREEN}✓${NC} ($SCORE)"
        else
            echo -e "${RED}✗${NC} ($SCORE/10)"
            echo -e "${RED}   Score must be 8.0 or higher${NC}"
            EXIT_CODE=1
        fi
    fi
else
    echo -e "${YELLOW}⚠${NC} (pylint not installed)"
fi

# ============================================
# SUMMARY
# ============================================
echo ""
echo -e "${BLUE}================================================${NC}"

if [ $EXIT_CODE -eq 0 ]; then
    echo -e "${GREEN}✓ ALL QUALITY GATES PASSED${NC}"
    echo -e "${GREEN}Ready to commit${NC}"
    echo -e "${BLUE}================================================${NC}"
else
    echo -e "${RED}✗ QUALITY GATES FAILED${NC}"
    echo -e "${RED}Commit is BLOCKED${NC}"
    echo -e "${RED}================================================${NC}"
    echo ""
    echo -e "${RED}Fix the issues above and try again:${NC}"
    echo "  • Fix failing tests: pytest -v"
    echo "  • Increase coverage: coverage report"
    echo "  • Fix type errors: mypy --strict *.py"
    echo "  • Fix security issues: bandit -r -ll *.py"
    echo "  • Fix linting issues: pylint *.py"
    echo ""
fi

exit $EXIT_CODE
